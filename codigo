import heapq

def dijkstra(graph, start):
    distances = {node: float('inf') for node in graph}
    distances[start] = 0
    queue = [(0, start)]
    while queue:
        current_distance, current_node = heapq.heappop(queue)
        if current_distance > distances[current_node]:
            continue
        for neighbor, weight in graph[current_node].items():
            distance = current_distance + weight
            if distance < distances[neighbor]:
                distances[neighbor] = distance
                heapq.heappush(queue, (distance, neighbor))
    return distances


grafo = {
    '1': {'2': 3},
    '2': {'1': 3, '3': 2},
    '3': {'2': 2, '4': 1},
    '4': {'3': 1, '5': 2},
    '5': {'4': 2, '6': 3},
    '6': {'5': 3, '7': 2, '11': 10},
    '7': {'6': 2, '8': 1},
    '8': {'7': 1, '9': 2},
    '9': {'8': 2, '10': 3},
    '10': {'9': 3, '11': 2},
    '11': {'10': 2, '6': 10, '12': 3},
    '12': {'11': 3, '13': 1},
    '13': {}
}

# Calculando o menor caminho a partir do nó 1
shortest_distances = dijkstra(grafo, '1')

# Imprimindo os resultados
for node, distance in shortest_distances.items():
    print(f"Menor distância de 1 a {node}: {distance}")
